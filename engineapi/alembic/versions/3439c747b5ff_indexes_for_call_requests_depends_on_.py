"""Indexes for call requests depends on type

Revision ID: 3439c747b5ff
Revises: b4257b10daaf
Create Date: 2023-08-09 10:53:39.681230

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3439c747b5ff'
down_revision = 'b4257b10daaf'
branch_labels = None
depends_on = None


def upgrade():
    # Fetch IDs of duplicates for 'raw' call_request_type and delete it
    op.execute("""WITH Duplicates AS (
    SELECT 
        id,
        registered_contract_id,
        call_request_type_name,
        caller,
        parameters->'calldata' AS calldata,
        created_at,
        ROW_NUMBER() OVER (
            PARTITION BY 
                registered_contract_id,
                call_request_type_name,
                caller,
                parameters->'calldata' 
            ORDER BY created_at ASC
        ) AS row_num
    FROM call_requests
    WHERE call_request_type_name = 'raw' 
),
DeleteDuplicates AS (
SELECT id
FROM 
    Duplicates
WHERE
    row_num < (
        SELECT COUNT(*) FROM Duplicates d2
        WHERE d2.registered_contract_id = Duplicates.registered_contract_id
        AND d2.call_request_type_name = Duplicates.call_request_type_name
        AND d2.caller = Duplicates.caller
        AND d2.calldata = Duplicates.calldata
    )
)
DELETE FROM call_requests WHERE id IN (SELECT id FROM DeleteDuplicates);""")
    
    # Fetch IDs of duplicates for 'dropper-v0.2.0' call_request_type and delete it
    op.execute("""WITH Duplicates AS (
    SELECT 
        id,
        registered_contract_id,
        call_request_type_name,
        parameters->'requestID' AS request_id,
        created_at,
        ROW_NUMBER() OVER (
            PARTITION BY 
                registered_contract_id,
                call_request_type_name,
                parameters->'requestID' 
            ORDER BY created_at ASC
        ) AS row_num
    FROM call_requests
    WHERE call_request_type_name = 'dropper-v0.2.0' 
),
DeleteDuplicates AS (
SELECT id
FROM 
    Duplicates
WHERE
    row_num < (
        SELECT COUNT(*) FROM Duplicates d2
        WHERE d2.registered_contract_id = Duplicates.registered_contract_id
        AND d2.call_request_type_name = Duplicates.call_request_type_name
        AND d2.request_id = Duplicates.request_id
    )
)
DELETE FROM call_requests WHERE id IN (SELECT id FROM DeleteDuplicates);""")
    
    op.execute("CREATE UNIQUE INDEX uq_call_requests_dropperv020_requestid ON call_requests ((parameters->>'requestID')) WHERE call_request_type_name = 'dropper-v0.2.0';")
    op.execute("CREATE UNIQUE INDEX uq_call_requests_raw_caller_calldata ON call_requests (caller, (parameters->>'calldata')) WHERE call_request_type_name = 'raw';")

    # Other
    op.create_unique_constraint(op.f('uq_blockchains_id'), 'blockchains', ['id'])
    op.create_unique_constraint(op.f('uq_call_request_types_name'), 'call_request_types', ['name'])
    op.create_unique_constraint(op.f('uq_metatx_requesters_id'), 'metatx_requesters', ['id'])
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_call_requests_raw_caller_calldata', table_name='call_requests', postgresql_where=sa.text("call_request_type_name = 'raw'"))
    op.drop_index('uq_call_requests_dropperv020_requestid', table_name='call_requests', postgresql_where=sa.text("call_request_type_name = 'dropper-v0.2.0'"))
    ### end Alembic commands ###
